// --------------------------------------------------------------------------------------
// JSON type provider - methods that are called from the generated erased code
// --------------------------------------------------------------------------------------
namespace FSharp.Data.Runtime.BaseTypes

open System.ComponentModel
open System.IO
open FSharp.Data
open System.Text.Json.Nodes
open System.Text.Json

#nowarn "10001"

[<Struct>]
type JsonWrapper(node: JsonNode) =
    //new(json: string) = JsonWrapper(JsonNode.Parse(json))
    member this.JsonNode = node

    ///// <exclude />
    //[<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
    //[<CompilerMessageAttribute("This method is intended for use in generated code only.",
    //                            10001,
    //                            IsHidden = true,
    //                            IsError = false)>]
    //static member Create(value, path) =
    //    //{ Json = value; Path = path } :> IJsonDocument2
    //    JsonWrapper()

    /// <exclude />
    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
                               10001,
                               IsHidden = true,
                               IsError = false)>]
    static member ParseNode(text: string) =
        // TODO: handle possible null output?
        JsonNode.Parse(
            text,
            documentOptions =
                JsonDocumentOptions(CommentHandling = JsonCommentHandling.Skip, AllowTrailingCommas = true)
        )

    /// <exclude />
    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
                               10001,
                               IsHidden = true,
                               IsError = false)>]
    static member Create(reader: TextReader) =
        use reader = reader
        let text = reader.ReadToEnd()
        JsonWrapper.ParseNode(text) |> JsonWrapper

    /// <exclude />
    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
                               10001,
                               IsHidden = true,
                               IsError = false)>]
    static member CreateList(reader: TextReader) =
        use reader = reader
        let text = reader.ReadToEnd()

        match JsonWrapper.ParseNode(text) with
        | :? JsonArray as array -> [| for item in array -> JsonWrapper(item) |]
        | other -> [| JsonWrapper(other) |]

//match JsonValue2.ParseMultiple(text) |> Seq.toArray with
//| [| JsonValue2.Array array |] -> array
//| array -> array
////|> Array.mapi (fun i value -> JsonDocument2.Create(value, "[" + (string i) + "]"))
//[| JsonWrapper() |]


///// <exclude />
//type IJsonDocument2 =
//    abstract JsonValue: JsonValue2

//    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
//    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
//                               10001,
//                               IsHidden = true,
//                               IsError = false)>]
//    abstract Path: unit -> string

//    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
//    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
//                               10001,
//                               IsHidden = true,
//                               IsError = false)>]
//    abstract CreateNew: value: JsonValue2 * pathIncrement: string -> IJsonDocument2

///// <summary>Underlying representation of types generated by JsonProvider</summary>
///// <namespacedoc>
/////   <summary>Contains the runtime base types used by generated row types for FSharp.Data type providers.</summary>
///// </namespacedoc>
//[<StructuredFormatDisplay("{JsonValue}")>]
//type JsonDocument2 =

//    private
//        {
//            /// <exclude />
//            Json: JsonValue2
//            /// <exclude />
//            Path: string
//        }

//    interface IJsonDocument2 with
//        member x.JsonValue = x.Json
//        member x.Path() = x.Path

//        member x.CreateNew(value, pathIncrement) =
//            JsonDocument2.Create(value, x.Path + pathIncrement)

//    /// The underlying JsonValue
//    member x.JsonValue = x.Json

//    /// <exclude />
//    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
//    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
//                               10001,
//                               IsHidden = true,
//                               IsError = false)>]
//    override x.ToString() = x.JsonValue.ToString()

//    /// <exclude />
//    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
//    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
//                               10001,
//                               IsHidden = true,
//                               IsError = false)>]
//    static member Create(value, path) =
//        { Json = value; Path = path } :> IJsonDocument2

//    /// <exclude />
//    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
//    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
//                               10001,
//                               IsHidden = true,
//                               IsError = false)>]
//    static member Create(reader: TextReader) =
//        use reader = reader
//        let text = reader.ReadToEnd()
//        let value = JsonValue2.Parse(text)
//        JsonDocument2.Create(value, "")

//    /// <exclude />
//    [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
//    [<CompilerMessageAttribute("This method is intended for use in generated code only.",
//                               10001,
//                               IsHidden = true,
//                               IsError = false)>]
//    static member CreateList(reader: TextReader) =
//        use reader = reader
//        let text = reader.ReadToEnd()

//        match JsonValue2.ParseMultiple(text) |> Seq.toArray with
//        | [| JsonValue2.Array array |] -> array
//        | array -> array
//        |> Array.mapi (fun i value -> JsonDocument2.Create(value, "[" + (string i) + "]"))
